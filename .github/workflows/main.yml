name: Main CodeMasterBot workflow

on:
  push:
    branches:
      - main

jobs:
  lint_and_test:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Lint with Ruff
        run: |
          pip install ruff
          ruff check --config ruff_config/prod/pyproject.toml .
          ruff format --check --exit-non-zero-on-fix --config ruff_config/prod/pyproject.toml .

  build_backend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    needs: [lint_and_test]
    runs-on: ubuntu-latest    
    steps:
      - name: Check out the repo        
        uses: actions/checkout@v3
      - name: Set up Docker Buildx        
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker        
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}          
      - name: Push to DockerHub        
        uses: docker/build-push-action@v4
        with:          
          context: ./backend/          
          push: true          
          tags: kuninav/masterbot_backend:latest

  build_bot_and_push_to_docker_hub:
    name: Push bot Docker image to DockerHub
    needs: [lint_and_test]
    runs-on: ubuntu-latest    
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: kuninav/masterbot_bot:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    needs: [lint_and_test]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true                  
          tags: kuninav/masterbot_nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_bot_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3    
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master    
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "masterbot"
        port: ${{ secrets.SSH_PORT }}
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          cd masterbot          
          sudo docker compose -f docker-compose.production.yml pull          
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d          
          sudo docker compose -f docker-compose.production.yml exec wsgi python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec wsgi python manage.py collectstatic --no-input
          sudo docker compose -f docker-compose.production.yml exec wsgi cp -r /app/staticfiles/. /app/static/
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN_MESSAGE }}
        message: |
          Деплой успешно выполнен!
          Ссылка на завершенный run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}