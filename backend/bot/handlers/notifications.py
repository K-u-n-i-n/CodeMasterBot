from datetime import datetime

from asgiref.sync import sync_to_async
from telegram import Update
from telegram.ext import ContextTypes

from bot.handlers import db_helpers, context_helpers, keyboards


async def handle_notification_toggle(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()

    user_id = query.from_user.id
    user = await db_helpers.get_user_from_db(user_id)
    if not user:
        return

    settings = await db_helpers.get_or_create_user_settings(user)

    if query.data == 'notifications_on':
        settings.notification = True
        await query.edit_message_text(
            text='üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!',
            reply_markup=keyboards.notification_time_keyboard
        )

    elif query.data == 'notifications_off':
        settings.notification = False
        await query.edit_message_text(
            text='üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.'
        )
        # # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        # await handlers.handle_my_settings(update, context)

    await sync_to_async(settings.save)()
    await query.answer()


async def handle_set_notification_time(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è'."""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.edit_message_text(
        text=(
            '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
            '–ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00):'
        )
    )
    context.user_data['awaiting_notification_time'] = True
    await query.answer()


async def handle_notification_time_input(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    if not context.user_data.get('awaiting_notification_time'):
        return

    user_id = update.message.from_user.id
    user = await db_helpers.get_user_from_db(user_id)
    if not user:
        return

    settings = await db_helpers.get_or_create_user_settings(user)

    try:
        notification_time = datetime.strptime(
            update.message.text, '%H:%M').time()
        settings.notification_time = notification_time
        await sync_to_async(settings.save)()
        await update.message.reply_text(
            f'–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {
                notification_time.strftime("%H:%M")}.'
        )
    except ValueError:
        await update.message.reply_text(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.'
            '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00).'
        )

    context.user_data['awaiting_notification_time'] = False
