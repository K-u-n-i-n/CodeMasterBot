"""
–ì–æ–ª–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π,
–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
"""

import random
import logging

from asgiref.sync import sync_to_async
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import ContextTypes

from bot.handlers.utils import get_all_names_except, get_random_questions
from bot.models import CustomUser, Question
from .keyboards import (
    config_keyboard,
    complexity_keyboard,
    topic_keyboard,
    next_keyboard,
    notification_keyboard
)


async def handle_config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            reply_markup=config_keyboard
        )


async def handle_complexity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', reply_markup=complexity_keyboard
        )


async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', reply_markup=topic_keyboard
        )


async def handle_notifications_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            reply_markup=notification_keyboard
        )


async def handle_help_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–¢—É—Ç –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.'
        )


async def handle_quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    if update.message:
        queryset = Question.objects.filter(tags__slug='func')
        random_questions = await get_random_questions(queryset, 10)

        if not random_questions:
            await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.')
            return

        context.user_data['quiz_questions'] = random_questions
        context.user_data['current_question'] = None
        context.user_data['used_names'] = [q.name for q in random_questions]

        await ask_next_question(update, context)


async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞."""

    logging.info('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å')
    questions = context.user_data.get('quiz_questions', [])
    logging.info(f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}')

    if not questions:
        message = update.message or update.callback_query.message
        if message:
            await message.reply_text('üí• –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        context.user_data.clear()
        return

    # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question = questions.pop(0)
    context.user_data['current_question'] = current_question
    context.user_data['quiz_questions'] = questions
    logging.info(f'–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {current_question.description}')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    all_names = await get_all_names_except(current_question.id)
    logging.info(f'–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–º–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {len(all_names)}')
    incorrect_answers = random.sample(all_names, k=min(3, len(all_names)))
    options = [current_question.name] + incorrect_answers
    random.shuffle(options)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(option, callback_data=option)] for option in options
    ])
    logging.info('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞')

    message = update.message or update.callback_query.message
    if message:
        await message.reply_text(
            text=(
                f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                f'{current_question.description}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:'
            ),
            reply_markup=keyboard,
        )
        logging.info('–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')
    else:
        logging.warning('–í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')


async def handle_question_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å."""

    query = update.callback_query
    await query.answer()

    current_question = context.user_data.get('current_question')
    if not current_question:
        await query.edit_message_text('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    user_answer = query.data  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    questions = context.user_data.get('quiz_questions', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    if user_answer == current_question.name:
        text = (
            f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n'
            f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )
    else:
        text = (
            f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n'
            f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n\n'
            f'–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n'
            f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )

    await query.edit_message_text(text)

    await query.message.reply_text(
        text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?',
        reply_markup=next_keyboard,
    )


async def handle_next_or_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ '–î–∞–ª–µ–µ' –∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'."""

    query = update.callback_query
    await query.answer()

    if query.data == 'next':
        await ask_next_question(update, context)
        await query.edit_message_text('üî• –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:')

    elif query.data == 'end':
        context.user_data.clear()
        await query.edit_message_text(
            '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üëã'
        )


async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    logging.info('–ó–∞–ø—É—Å–∫ handle_registration')

    if not update.callback_query:
        logging.warning('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç callback_query.')
        return

    callback_data = update.callback_query.data

    if callback_data != 'registration':
        logging.warning(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π callback_data: {callback_data}')
        return

    await update.callback_query.answer()

    telegram_id = update.effective_user.id
    username = update.effective_user.username

    user, created = await sync_to_async(
        CustomUser.objects.get_or_create)(user_id=telegram_id)

    if created:
        user.username = username
        await sync_to_async(user.save)()
        await update.callback_query.message.reply_text('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await update.callback_query.message.reply_text(
            f'{user.username} –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        )


async def handle_generic_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å"""

    if update.callback_query is None:
        return

    query = update.callback_query

    await query.answer()
    await query.edit_message_text(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.'
    )
