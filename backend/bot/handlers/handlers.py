"""
–ì–æ–ª–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π,
–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
"""

import logging

from asgiref.sync import sync_to_async
from telegram import Update, Message
from telegram.ext import ContextTypes

from bot.handlers import (
    db_helpers,
    context_helpers,
    messages,
    quiz_helpers,
    utils
)
from bot.models import CustomUser, UserSettings
from .keyboards import (
    config_keyboard,
    complexity_keyboard,
    notification_keyboard,
    topic_keyboard,
)

logger = logging.getLogger(__name__)


async def handle_config(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞"""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    user_id = query.from_user.id
    settings, has_settings = await db_helpers.get_user_settings(user_id)
    keyboard = config_keyboard

    if not has_settings:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
    else:
        if isinstance(settings, UserSettings):
            text = (
                'üìå <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n'
                '‚öôÔ∏è <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> '
                f'{settings.difficulty or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n'
                'üéØ <b>–¢–µ–º–∞:</b> '
                f'{settings.tag or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n'
                'üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:</b> '
                f'{'–í–ö–õ' if settings.notification else '–í–´–ö–õ'}\n'
                '‚è∞ <b>–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:</b> '
                f'{settings.notification_time.strftime("%H:%M")}\n\n'
                'üì¢‚ùóüö® <b>–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Ä–µ–º—è –ø–æ UTC</b> üì¢‚ùóüö®'
            )

    await query.answer()
    await query.edit_message_text(
        text=text, reply_markup=keyboard, parse_mode='HTML'
    )


async def handle_complexity(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()
    await query.edit_message_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', reply_markup=complexity_keyboard
    )


async def handle_topic_selection(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã"""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()
    await query.edit_message_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', reply_markup=topic_keyboard
    )


async def handle_topic_choice(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()
    tg_user = query.from_user

    user = await db_helpers.get_user_from_db(tg_user.id)
    if not user:
        await utils.send_response_message(
            query, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        )
        return

    chosen_topic = await utils.get_chosen_topic(query)
    if not chosen_topic:
        await utils.send_response_message(
            query, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
        )
        return

    settings = await db_helpers.get_or_create_user_settings(user)
    topic_updated = await db_helpers.update_user_topic(settings, chosen_topic)

    if not topic_updated:
        await utils.send_response_message(
            query, f'–¢–µ–º–∞ "{chosen_topic}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        )
        return

    await handle_config(update, context)


async def handle_notifications_settings(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()
    await query.edit_message_text(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
        reply_markup=notification_keyboard
    )


async def handle_quiz_start(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""

    logger.info('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞".')

    if not update.message:
        logger.error('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.')
        return

    if update.effective_user is None:
        logger.warning('effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update.')
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return

    user_id = update.effective_user.id
    user_settings, has_personal_settings = (
        await db_helpers.get_user_settings(user_id)
    )

    if not has_personal_settings:
        await update.message.reply_text(
            '‚ùó –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —Å–µ–±—è!\n\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:\n'
            '‚ú® "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞" ‚ú®\n\n'
            '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n'
            '‚ö†Ô∏è "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" ‚ö†Ô∏è'
        )
        tag_slug = db_helpers.DEFAULT_SETTINGS_USER['tag']

    else:
        if isinstance(user_settings, UserSettings):
            tag_slug = user_settings.tag.slug
        else:
            logger.warning(
                f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}'
                f' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {user_settings}'
            )
            await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.')
            tag_slug = db_helpers.DEFAULT_SETTINGS_USER['tag']

    random_questions = await db_helpers.get_random_questions_by_tag(
        10, tag_slug=tag_slug)
    if not random_questions:
        await messages.send_no_questions_message(update)
        return

    await context_helpers.prepare_quiz_context(context, random_questions)

    next_question = await context_helpers.get_next_question_from_context(
        context)
    if not next_question:
        await messages.send_error_message(update)
        return

    await quiz_helpers.ask_next_question(update, context)


async def handle_question_answer(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å."""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()

    if context.user_data is None:
        logger.warning('context.user_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        await query.edit_message_text('–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        return

    current_question = context.user_data.get('current_question')
    if not current_question:
        await query.edit_message_text('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    user_answer = query.data  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    if user_answer == current_question.name:
        context.user_data['correct_answers'] = (
            context.user_data.get('correct_answers', 0) + 1
        )
        text = (
            '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )
    else:
        text = (
            '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n'
            f'–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n'
            f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )

    await query.edit_message_text(text)
    await handle_next_step(update, context)


async def handle_next_step(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç: –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."""

    if context.user_data is None:
        return None

    if context.user_data and 'quiz_questions' in context.user_data:
        next_question = context.user_data['quiz_questions'].pop(
            0) if context.user_data['quiz_questions'] else None
    else:
        next_question = None

    if next_question:
        context.user_data['current_question'] = next_question
        await quiz_helpers.ask_next_question(update, context)
    else:
        await quiz_helpers.finish_quiz(update, context)


async def handle_end(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'."""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()

    if context.user_data:
        context.user_data.clear()
        await query.edit_message_text('‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚õî')


async def handle_registration(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    logger.info('–ó–∞–ø—É—Å–∫ handle_registration')

    if not update.callback_query:
        logger.warning('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç callback_query.')
        return

    callback_data = update.callback_query.data

    if callback_data != 'registration':
        logger.warning(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π callback_data: {callback_data}')
        return

    await update.callback_query.answer()

    if update.effective_user is None:
        logger.warning('effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update.')
        return

    telegram_id = update.effective_user.id
    username = update.effective_user.username

    user, created = await sync_to_async(
        CustomUser.objects.get_or_create)(user_id=telegram_id)

    if not isinstance(update.callback_query.message, Message):
        logger.warning('callback_query.message –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Message.')
        return

    if created:
        user.username = username
        await sync_to_async(user.save)()
        await update.callback_query.message.reply_text('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await update.callback_query.message.reply_text(
            f'{user.username} –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        )


async def handle_generic_callback(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å"""

    query = context_helpers.get_callback_query(update)
    if not query:
        return

    await query.answer()
    await query.edit_message_text(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.',
        reply_markup=config_keyboard
    )
