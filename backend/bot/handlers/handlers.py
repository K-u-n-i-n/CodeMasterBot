"""
–ì–æ–ª–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π,
–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.
"""

import random
import logging
from typing import Tuple, List, Union

from asgiref.sync import sync_to_async
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import ContextTypes

from bot.handlers import db_helpers, context_helpers, utils
from bot.models import CustomUser, Question, UserSettings
from .keyboards import (
    config_keyboard,
    complexity_keyboard,
    menu_keyboard,
    notification_keyboard,
    topic_keyboard,
)


logger = logging.getLogger(__name__)

DEFAULT_SETTINGS_USER = {
    'tag': 'func',
    'difficulty': 'easy',
}


async def handle_config(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            reply_markup=config_keyboard
        )


async def handle_complexity(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', reply_markup=complexity_keyboard
        )


async def handle_topic_selection(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', reply_markup=topic_keyboard
        )


async def handle_topic_choice(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""

    query = update.callback_query
    if not query:
        logger.warning('CallbackQuery –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ update.')
        return

    await query.answer()
    tg_user = query.from_user

    user = await db_helpers.get_user_from_db(tg_user.id)
    if not user:
        await utils.send_response_message(
            query, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        )
        return

    chosen_topic = await utils.get_chosen_topic(query)
    if not chosen_topic:
        await utils.send_response_message(
            query, '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
        return

    settings = await db_helpers.get_or_create_user_settings(user)
    topic_updated = await db_helpers.update_user_topic(settings, chosen_topic)

    if not topic_updated:
        await utils.send_response_message(
            query, f'–¢–µ–º–∞ "{chosen_topic}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
        )
        return

    await utils.send_response_message(
        query,
        f'–¢–µ–º–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {chosen_topic}.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.',
        reply_markup=config_keyboard
    )


async def handle_notifications_settings(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""

    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            reply_markup=notification_keyboard
        )


async def get_user_settings(
        user_id: int) -> Tuple[Union[UserSettings, dict], bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î –∏–ª–∏ –≤ UserSettings,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    try:
        user = await CustomUser.objects.aget(user_id=user_id)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.user_id}')

    except CustomUser.DoesNotExist:
        logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return DEFAULT_SETTINGS_USER, False

    try:
        settings = await UserSettings.objects.select_related('tag').aget(
            user=user)
        logger.info(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–∞–π–¥–µ–Ω—ã')
        return settings, True

    except UserSettings.DoesNotExist:
        logger.info(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return DEFAULT_SETTINGS_USER, False


async def handle_my_settings(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'."""

    query = update.callback_query
    user_id = query.from_user.id
    settings, has_settings = await get_user_settings(user_id)
    keyboard = menu_keyboard

    if not has_settings:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.'
    else:
        text = (
            f'üìå <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n'
            f'üéØ <b>–¢–µ–º–∞:</b> {settings.tag or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n'
            f'‚öôÔ∏è <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {settings.difficulty or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n'
            f'üîî <b>–û–ø–æ–≤–µ—â–µ–Ω–∏–µ:</b> {settings.notification or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n'
            f'‚è∞ <b>–í—Ä–µ–º—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:</b>'
            f'{settings.notification_time.strftime("%H:%M")}\n\n'
            f'üì¢‚ùóüö® <b>–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Ä–µ–º—è –ø–æ UTC</b> üì¢‚ùóüö®'
        )

    await query.answer()
    await query.edit_message_text(
        text=text, reply_markup=keyboard, parse_mode='HTML'
    )


async def handle_quiz_start(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""

    if not update.message:
        return

    user_id = update.effective_user.id
    user_settings, has_personal_settings = await get_user_settings(user_id)

    if not has_personal_settings:
        await update.message.reply_text(
            '‚ùó –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è —Å–µ–±—è!\n\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é:\n'
            '‚ú® "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞" ‚ú®\n\n'
            '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n'
            '‚ö†Ô∏è "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" ‚ö†Ô∏è'
        )
        tag_slug = DEFAULT_SETTINGS_USER['tag']

    else:
        tag_slug = user_settings.tag.slug

    random_questions = await get_random_questions_by_tag(10, tag_slug=tag_slug)
    if not random_questions:
        await send_no_questions_message(update)
        return

    await prepare_quiz_context(context, random_questions)

    next_question = await get_next_question_from_context(context)
    if not next_question:
        await send_error_message(update)
        return

    await ask_next_question(update, context)


async def get_random_questions_by_tag(
        count: int, tag_slug: str) -> List[Question]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É."""

    queryset = Question.objects.filter(tags__slug=tag_slug)
    return await utils.get_random_questions(queryset, count)


async def send_no_questions_message(update: Update) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç."""

    await update.message.reply_text(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ–π —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. üòî\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥—Ä—É–≥—É—é —Ç–µ–º—É'
    )


async def prepare_quiz_context(
        context: ContextTypes.DEFAULT_TYPE, questions: List[Question]) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –≤ user_data."""

    context.user_data['quiz_questions'] = questions
    context.user_data['used_names'] = [q.name for q in questions]


async def get_next_question_from_context(
        context: ContextTypes.DEFAULT_TYPE) -> Union[Question, None]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

    next_question = context_helpers.get_next_question(context)
    if next_question:
        context.user_data['current_question'] = next_question
    return next_question


async def send_error_message(update: Update) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""

    await update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')


async def ask_next_question(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞."""

    current_question = context.user_data.get('current_question')
    if not current_question:
        logger.warning('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    all_names = await utils.get_all_names_except(current_question.id)
    incorrect_answers = random.sample(all_names, k=min(3, len(all_names)))
    options = [current_question.name] + incorrect_answers
    random.shuffle(options)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(option, callback_data=option)] for option in options
    ] + [
        [InlineKeyboardButton('‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚õî', callback_data='end')]
    ])

    remaining_questions = len(context.user_data.get('quiz_questions', []))

    message = update.message or update.callback_query.message
    if message:
        await message.reply_text(
            text=(
                f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining_questions}\n\n'
                f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                f'{current_question.description}\n\n'
                f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:'
            ),
            reply_markup=keyboard,
        )


async def handle_question_answer(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å."""

    query = update.callback_query
    await query.answer()

    current_question = context.user_data.get('current_question')
    if not current_question:
        await query.edit_message_text('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    user_answer = query.data  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

    if user_answer == current_question.name:
        text = (
            f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!\n\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )
    else:
        text = (
            f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n'
            f'–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}\n'
            f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question.name}\n\n'
            f'–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n{current_question.description}\n\n'
            f'–°–∏–Ω—Ç–∞–∫—Å–∏—Å:\n{current_question.syntax}'
        )

    await query.edit_message_text(text)
    await handle_next_step(update, context)


async def handle_next_step(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏–ª–∏ –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""

    next_question = context_helpers.get_next_question(context)

    if next_question:
        context.user_data['current_question'] = next_question
        await ask_next_question(update, context)
    else:
        await (update.message or update.callback_query.message).reply_text(
            '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üëã'
        )
        context.user_data.clear()


async def handle_end(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'."""

    query = update.callback_query
    await query.answer()

    context.user_data.clear()
    await query.edit_message_text('‚õî –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚õî')


async def handle_registration(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    logger.info('–ó–∞–ø—É—Å–∫ handle_registration')

    if not update.callback_query:
        logger.warning('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç callback_query.')
        return

    callback_data = update.callback_query.data

    if callback_data != 'registration':
        logger.warning(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π callback_data: {callback_data}')
        return

    await update.callback_query.answer()

    telegram_id = update.effective_user.id
    username = update.effective_user.username

    user, created = await sync_to_async(
        CustomUser.objects.get_or_create)(user_id=telegram_id)

    if created:
        user.username = username
        await sync_to_async(user.save)()
        await update.callback_query.message.reply_text('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await update.callback_query.message.reply_text(
            f'{user.username} –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        )


async def handle_generic_callback(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π callback-–∑–∞–ø—Ä–æ—Å"""

    if update.callback_query is None:
        return

    query = update.callback_query

    await query.answer()
    await query.edit_message_text(
        text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.'
    )
