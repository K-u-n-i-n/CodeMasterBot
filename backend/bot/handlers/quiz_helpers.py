import logging
import random
from typing import List

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Update,
)
from telegram.ext import ContextTypes

from bot.handlers import db_helpers, utils
from bot.handlers.static_data import STICKERS

logger = logging.getLogger(__name__)


async def get_incorrect_answers(
        current_question, all_names: List[str], num_answers: int) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""

    logger.info(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.'
    )

    return random.sample(all_names, k=min(num_answers, len(all_names)))


async def create_keyboard(options: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞."""

    logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞.')

    return InlineKeyboardMarkup([
        [InlineKeyboardButton(
            option, callback_data=option)] for option in options
    ] + [
        [InlineKeyboardButton('‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚õî', callback_data='end')]
    ])


async def send_question_message(
    update: Update, current_question,
        remaining_questions: int,
        keyboard: InlineKeyboardMarkup
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞."""

    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.')

    message = update.message or (
        update.callback_query.message if update.callback_query else None)

    if isinstance(message, Message):
        await message.reply_text(
            text=(
                f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining_questions}\n\n'
                '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                f'{current_question.description}\n\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:'
            ),
            reply_markup=keyboard,
        )


async def send_hard_question_message(
    update: Update, current_question,
        remaining_questions: int,
        keyboard: InlineKeyboardMarkup
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è Hard —Ä–µ–∂–∏–º–∞."""

    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è Hard —Ä–µ–∂–∏–º–∞.')

    message = update.message or (
        update.callback_query.message if update.callback_query else None)

    if isinstance(message, Message):
        await message.reply_text(
            text=(
                f'–û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {remaining_questions}\n\n'
                '–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n'
                f'{current_question.description}\n\n'
                'üëá –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç. üëá\n\n'
                '‚úîÔ∏è –ù–∞–ø—Ä–∏–º–µ—Ä: pop()'
            ),
            reply_markup=keyboard,
        )


async def ask_next_question(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    –í —Ä–µ–∂–∏–º–µ Easy ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
    –í —Ä–µ–∂–∏–º–µ Hard ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏
    –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.
    """

    logger.info('–í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –í —Ä–µ–∂–∏–º–µ Easy –∏ Hard')

    if context.user_data is None:
        logger.warning('context.user_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        return

    current_question = context.user_data.get('current_question')
    if not current_question:
        logger.warning('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        if update.message:
            await update.message.reply_text(
                '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
            )
        return

    if update.effective_user is None:
        logger.warning('update.effective_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        return

    user_id = update.effective_user.id
    user_settings, _ = await db_helpers.get_user_settings(user_id)

    if isinstance(user_settings, dict):
        difficulty = user_settings.get('difficulty', 'easy')
    else:
        difficulty = user_settings.difficulty if user_settings else 'easy'

    if difficulty == 'easy':
        all_names = await utils.get_all_names_except(current_question.id)
        num_incorrect_answers = min(3, len(all_names))
        if num_incorrect_answers < 3:
            logger.warning(
                f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {
                    current_question.id}.'
            )
        incorrect_answers = await get_incorrect_answers(
            current_question, all_names, num_incorrect_answers
        )
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
        options = [current_question.name] + incorrect_answers
        random.shuffle(options)
        keyboard = await create_keyboard(options)
        remaining_questions = len(context.user_data.get('quiz_questions', []))
        await send_question_message(
            update, current_question, remaining_questions, keyboard
        )
    elif difficulty == 'hard':
        logger.info(f'–†–µ–∂–∏–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {difficulty} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.')
        remaining_questions = len(context.user_data.get('quiz_questions', []))

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                '‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É ‚õî', callback_data='end')]
        ])
        await send_hard_question_message(
            update, current_question,
            remaining_questions, keyboard
        )

    else:
        logger.warning(
            f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {difficulty}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º Easy.'
        )
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É Easy
        all_names = await utils.get_all_names_except(current_question.id)
        num_incorrect_answers = min(3, len(all_names))
        if num_incorrect_answers < 3:
            logger.warning(
                f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {
                    current_question.id}.'
            )
        incorrect_answers = await get_incorrect_answers(
            current_question, all_names, num_incorrect_answers
        )
        options = [current_question.name] + incorrect_answers
        random.shuffle(options)
        keyboard = await create_keyboard(options)
        remaining_questions = len(context.user_data.get('quiz_questions', []))
        await send_question_message(
            update, current_question, remaining_questions, keyboard
        )


async def finish_quiz(
        update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
    –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞.
    """

    logger.info('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.')

    if context.user_data is None:
        logger.warning('context.user_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        return

    correct_answers = context.user_data.get('correct_answers', 0)

    message = update.message or (
        update.callback_query.message if update.callback_query else None)
    if isinstance(message, Message):
        await message.reply_text(
            'üéâ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n'
            f'üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ 10.'
        )
        await send_sticker(message, correct_answers)
        await message.reply_text(
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚ú® "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞" ‚ú®'
        )

    context.user_data.clear()


async def send_sticker(message: Message, correct_answers: int) -> None:
    """–í—ã–±–∏—Ä–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""

    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.')

    if correct_answers == 10:
        sticker = random.choice(STICKERS['perfect'])
    elif 7 <= correct_answers <= 9:
        sticker = random.choice(STICKERS['great'])
    else:
        sticker = random.choice(STICKERS['good'])

    await message.reply_sticker(sticker)
